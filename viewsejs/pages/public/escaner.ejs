<!DOCTYPE html>
<html lang="es-cl">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href="/iconos/Ciber.ico">


    <title>Cibervoluntarios Escaner</title>

    <!-- Custom fonts for this template-->
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="/css/sb-admin-2.min.css" rel="stylesheet">

</head>

<body class="bg-gradient-primary">

    <div class="container">

        <!-- Outer Row -->
        <div class="row justify-content-center">

            <div class="col-xl-10 col-lg-12 col-md-9">

                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <!-- Nested Row within Card Body -->
                        <div class="row">
                            <div class="col-lg-6 d-none d-lg-flex bg-login-image justify-content-center align-items-center">
                                <img src="/logos/ciber_negro_arriba_abajo.png" class="img-fluid" style="width:80%; height:auto;">
                            </div>

                            <div class="col-lg-6">
                                <div class="py-5 px-3">
                                    <div class="text-center">
                                        <h1 class="h4 text-gray-900 mb-4">Bienvenido</h1>
                                        
                                        <h6 class="h6 text-gray-900 mb-2">Desde aqui podrás escanear a los asistentes del evento:</h6>
                                        <h6 class="h6 text-gray-900 mb-2"><%= Evento.Nombre_actividad%></h6>
                                    </div>

                                    <div class="d-flex justify-content-center">
                                        <div class="barcode-wrapper" id="barcode-container">
                                            <div id="reader" style="width:400px"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>

    </div>


    <audio id="correcto" preload="auto">
        <source src="/sounds/correcto.mp3" type="audio/mpeg">
        Tu navegador no soporta audio HTML5.
    </audio>
    <audio id="incorrecto" preload="auto">
        <source src="/sounds/incorrecto.mp3" type="audio/mpeg">
        Tu navegador no soporta audio HTML5.
    </audio>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.4/html5-qrcode.min.js" integrity="sha512-k/KAe4Yff9EUdYI5/IAHlwUswqeipP+Cp5qnrsUjTPCgl51La2/JhyyjNciztD7mWNKLSXci48m7cctATKfLlQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


    <!-- Bootstrap core JavaScript-->
    <script src="/vendor/jquery/jquery.min.js"></script>
    <script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="/vendor/jquery-easing/jquery.easing.min.js"></script>

    <!-- Custom scripts for all pages-->
    <script src="/js/sb-admin-2.min.js"></script>

    <script>
        function scannerTranslator() {
        const traducciones = [
            {original: "QR code parse error, error =", traduccion: "Error al analizar el código QR, error ="},
            {original: "Error getting userMedia, error =", traduccion: "Error al obtener userMedia, error ="},
            {original: "The device doesn't support navigator.mediaDevices , only supported cameraIdOrConfig in this case is deviceId parameter (string).", traduccion: "El dispositivo no admite navigator.mediaDevices, en este caso sólo se admite cameraIdOrConfig como parámetro deviceId (cadena)."},
            {original: "Camera streaming not supported by the browser.", traduccion: "El navegador no admite la transmisión de la cámara."},
            {original: "Unable to query supported devices, unknown error.", traduccion: "No se puede consultar los dispositivos compatibles, error desconocido."},
            {original: "Camera access is only supported in secure context like https or localhost.", traduccion: "El acceso a la cámara sólo es compatible en un contexto seguro como https o localhost."},
            {original: "Scanner paused", traduccion: "Escáner en pausa"},
            {original: "Scanning", traduccion: "Escaneando"},
            {original: "Idle", traduccion: "Inactivo"},
            {original: "Error", traduccion: "Error"},
            {original: "Permission", traduccion: "Permiso"},
            {original: "No Cameras", traduccion: "Sin cámaras"},
            {original: "Last Match:", traduccion: "Última coincidencia:"},
            {original: "Code Scanner", traduccion: "Escáner de código"},
            {original: "Request Camera Permissions", traduccion: "Solicitar permisos de cámara"},
            {original: "Requesting camera permissions...", traduccion: "Solicitando permisos de cámara..."},
            {original: "No camera found", traduccion: "No se encontró ninguna cámara"},
            {original: "Stop Scanning", traduccion: "Detener escaneo"},
            {original: "Start Scanning", traduccion: "Iniciar escaneo"},
            {original: "Switch On Torch", traduccion: "Encender linterna"},
            {original: "Switch Off Torch", traduccion: "Apagar linterna"},
            {original: "Failed to turn on torch", traduccion: "Error al encender la linterna"},
            {original: "Failed to turn off torch", traduccion: "Error al apagar la linterna"},
            {original: "Launching Camera...", traduccion: "Iniciando cámara..."},
            {original: "Scan an Image File", traduccion: ""},
            {original: "Scan using camera directly", traduccion: "Escanear usando la cámara directamente"},
            {original: "Select Camera", traduccion: "Seleccionar cámara"},
            {original: "Choose Image", traduccion: "Elegir imagen"},
            {original: "Choose Another", traduccion: "Elegir otra"},
            {original: "No image choosen", traduccion: "Ninguna imagen seleccionada"},
            {original: "Anonymous Camera", traduccion: "Cámara anónima"},
            {original: "Or drop an image to scan", traduccion: "O arrastra una imagen para escanear"},
            {original: "Or drop an image to scan (other files not supported)", traduccion: "O arrastra una imagen para escanear (otros archivos no soportados)"},
            {original: "zoom", traduccion: "zoom"},
            {original: "Loading image...", traduccion: "Cargando imagen..."},
            {original: "Camera based scan", traduccion: "Escaneo basado en cámara"},
            {original: "Fule based scan", traduccion: "Escaneo basado en archivo"},
            {original: "Powered by ", traduccion: ""},
            {original: "Report issues", traduccion: ""},
            {original: "NotAllowedError: Permission denied", traduccion: "Permiso denegado para acceder a la cámara"}
        ];

        function traducirTexto(texto) {
            const traduccion = traducciones.find(t => t.original === texto);
            return traduccion ? traduccion.traduccion : texto;
        }

        function traducirNodosDeTexto(nodo) {
            if (nodo.nodeType === Node.TEXT_NODE) {
                nodo.textContent = traducirTexto(nodo.textContent.trim());
            } else {
                for (let i = 0; i < nodo.childNodes.length; i++) {
                    traducirNodosDeTexto(nodo.childNodes[i]);
                }
            }
        }

        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach((nodo) => {
                        traducirNodosDeTexto(nodo);
                    });
                }
            });
        });

        const config = {childList: true, subtree: true};
        observer.observe(document.body, config);

        traducirNodosDeTexto(document.body);
    }

    document.addEventListener('DOMContentLoaded', function () {
        scannerTranslator(document.querySelector('#qr-reader'));
    });

    const correcto = document.getElementById('correcto');
    const incorrecto = document.getElementById('incorrecto');


    const scanner = new Html5QrcodeScanner('reader', { 
        qrbox: {
            width: 200,
            height: 200,
        },
        fps: 20,
    });


    var pausa=false;



    scanner.render(success, error);


    function error(result) {
        console.log(result);

    }


    function success(result) {
        console.log(result);
        if(!pausa){
            pausa=true;
            if(extraerRUT(result)){
            socket.emit('validarRut',{Rut:formatRut(extraerRUT(result)),code:CODE});
            }else{
            socket.emit('validarQR',{Data:result,code:CODE});
            }
        }

    }
    function quitarpausa(){
        pausa=false;
    }

    </script>

</body>

</html>